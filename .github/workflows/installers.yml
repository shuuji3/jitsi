name: Installers

on:
  workflow_dispatch:
  push:
    branches:
      - master
      - new-build
  #pull_request:
  #  branches:
  #    - master

env:
  # Java version to use in the Jitsi Desktop jars
  INSTALLER_JAVA_VERSION: 17

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  version:
    name: Versioning
    runs-on: ubuntu-20.04
    outputs:
      jitsi_version_major: ${{ steps.parse.outputs.jitsi_version_major }}
      jitsi_version_minor: ${{ steps.parse.outputs.jitsi_version_minor }}
      jitsi_version_suffix: ${{ steps.parse.outputs.jitsi_version_suffix }}
      jitsi_version_git: ${{ steps.parse.outputs.jitsi_version_git }}
      jitsi_version_ncommits: ${{ steps.parse.outputs.jitsi_version_ncommits }}
      jitsi_version_hash: ${{ steps.parse.outputs.jitsi_version_hash }}
      jitsi_version_short: ${{ steps.parse.outputs.jitsi_version_short }}
      jitsi_version_full: ${{ steps.parse.outputs.jitsi_version_full }}
      jitsi_version_deb: ${{ steps.parse.outputs.jitsi_version_deb }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.INSTALLER_JAVA_VERSION }}
          distribution: temurin

      # don't use the setup-java cache option as this only caches what is
      # necessary for the version, not the other jobs
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-version-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-version-

      - name: Parse version
        id: parse
        run: resources/version.sh

  deb:
    name: ${{ matrix.dist.vendor }} ${{ matrix.dist.dist }} ${{ matrix.arch }}
    runs-on: ubuntu-latest
    needs:
      - version
    strategy:
      fail-fast: false
      matrix:
        dist:
          - { vendor: ubuntu, dist: bionic }
          - { vendor: ubuntu, dist: focal }
          - { vendor: ubuntu, dist: jammy }
          - { vendor: debian, dist: buster }
          - { vendor: debian, dist: bullseye }
        arch:
          - amd64
          - arm64
          - ppc64el
        include: [
          # crossbuild-essential-i386 is missing on bionic, failing sbuild
          #{ dist: { vendor: ubuntu, dist: bionic }, arch: i386 },
          { dist: { vendor: debian, dist: buster }, arch: i386 },
          { dist: { vendor: debian, dist: bullseye }, arch: i386 },
        ]

    env:
      UBUNTUTOOLS_UBUNTU_MIRROR: http://azure.archive.ubuntu.com/ubuntu
      UBUNTUTOOLS_DEBIAN_MIRROR: http://debian-archive.trafficmanager.net/debian/
      UBUNTUTOOLS_DEBSEC_MIRROR: http://debian-archive.trafficmanager.net/debian-security
      DEBIAN_FRONTEND: noninteractive

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          #for gbp dch
          fetch-depth: 0

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.INSTALLER_JAVA_VERSION }}
          distribution: temurin
          cache: maven

      - name: Install tools
        run: resources/deb-prepare.sh

      - name: Import GPG key
        env:
          GPG_PASSPHRASE: "${{ secrets.GPG_PW }}"
        run: |
          cat <(echo -e "${{ secrets.GPG_KEY }}") | gpg --batch --import
          gpg --list-secret-keys --keyid-format LONG

      - name: Build deb package
        # the user executing sbuild needs to be in the group sbuild, a relogin is not possible here
        # bionic doesn't have /bin and /usr/bin merged, thus /bin/bash
        shell: /usr/bin/sg sbuild -c "/bin/bash -e {0}"
        env:
          GPG_PASSPHRASE: "${{ secrets.GPG_PW }}"
        run: |
          resources/deb-build.sh \
            "${{ needs.version.outputs.jitsi_version_deb }}" \
            "${{ matrix.dist.dist }}" \
            "${{ matrix.arch }}"

      - name: Upload packages as artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.dist.vendor }}-${{ matrix.dist.dist }}-${{ matrix.arch }}
          path: target/debian/${{ matrix.dist.dist }}/*

  wix:
    name: Windows ${{ matrix.arch.actions }}
    runs-on: windows-latest
    needs: version
    strategy:
      matrix:
        arch:
          #- { actions: x86, cmake: Win32, cmake_opposite_arch: x64, java: "x86" }
          - { actions: x64, cmake: x64, cmake_opposite_arch: Win32, java: "x86-64" }
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Private SDK Download
        uses: actions/checkout@v3
        with:
          repository: jitsi/jitsi-3rdparty-nonredist
          ssh-key: ${{ secrets.PRIVATE_SDK_KEY }}
          path: build/private-sdk

      - name: Set up Java
        id: install_java
        uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: ${{ env.INSTALLER_JAVA_VERSION }}
          architecture: ${{ matrix.arch.actions }}
          cache: maven

      - name: Build Java
        shell: cmd
        run: mvn -B -DskipTests -Drevision=${{ needs.version.outputs.jitsi_version_full }} package

      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Verify Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1.0.4

      - name: Build natives
        env:
          JAVA_HOME: ${{ steps.install_java.outputs.path }}
        shell: cmd
        run: |
          cd %GITHUB_WORKSPACE%\native
          cmake -B cmake-build-${{ matrix.arch.actions }} -A ${{ matrix.arch.cmake }} ^
            -DMAIN_VERSION=${{ needs.version.outputs.jitsi_version_full }} ^
            -DGIT_VERSION=${{ needs.version.outputs.jitsi_version_git }} ^
            -DOCSDK_DIR=%GITHUB_WORKSPACE%\build\private-sdk\ocsdk2007 ^
            -DMAPI_HEADERS_DIR=%GITHUB_WORKSPACE%\build\private-sdk\outlook2010mapi
          cmake --build cmake-build-${{ matrix.arch.actions }} --config Release --target install

      - name: Build Outlook COM Server natives for oppsite arch (${{ matrix.arch.cmake_opposite_arch }})
        env:
          JAVA_HOME: ${{ steps.install_java.outputs.path }}
        shell: cmd
        run: |
          cd %GITHUB_WORKSPACE%\native
          cmake -B cmake-build-${{ matrix.arch.cmake_opposite_arch }} -A ${{ matrix.arch.cmake_opposite_arch }} ^
            -DMAIN_VERSION=${{ needs.version.outputs.jitsi_version_full }} ^
            -DGIT_VERSION=${{ needs.version.outputs.jitsi_version_git }} ^
            -DOCSDK_DIR=%GITHUB_WORKSPACE%\build\private-sdk\ocsdk2007 ^
            -DMAPI_HEADERS_DIR=%GITHUB_WORKSPACE%\build\private-sdk\outlook2010mapi
          cmake --build cmake-build-${{ matrix.arch.cmake_opposite_arch }} --config Release --target install.jmsoutlookaddrbookcomserver
          cd %GITHUB_WORKSPACE%
          copy lib\native\windows-x64\jmsoutlookaddrbookcomserver64.exe lib\native\windows-x86\jmsoutlookaddrbookcomserver64.exe
          copy lib\native\windows-x86\jmsoutlookaddrbookcomserver32.exe lib\native\windows-x64\jmsoutlookaddrbookcomserver32.exe

      - name: Upload CMake logs on failure
        if: ${{ failure() }}
        run: Compress-Archive -Path $Env:GITHUB_WORKSPACE/native/windows/src/native/cmake-build-${{ matrix.arch.actions }} -DestinationPath $Env:GITHUB_WORKSPACE/debug-logs.zip

      - name: Upload Debug logs
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: win-${{ matrix.arch.actions }}-debug
          path: debug*

      - name: Set up Java
        id: install_java_x64
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.INSTALLER_JAVA_VERSION }}
          architecture: x64
          distribution: temurin

      - name: Build installer
        env:
          JAVA_HOME: ${{ steps.install_java_x64.outputs.path }}
        shell: bash
        run: |
          cd $GITHUB_WORKSPACE/resources/install
          ./gradlew --no-daemon --stacktrace windowsZip signMsi -Papplication.target=${{ matrix.arch.actions }} -Pversion=${{ needs.version.outputs.jitsi_version_full }} -PgitVersion=${{ needs.version.outputs.jitsi_version_git }}

      - name: Upload msi
        uses: actions/upload-artifact@v3
        with:
          name: jitsi-win-${{ matrix.arch.actions }}
          path: |
            resources/install/build/install/wix/jitsi-*.msi
            resources/install/build/distributions/jitsi-*.zip

  mac:
    runs-on: macos-latest
    needs: version
    strategy:
      fail-fast: false
      matrix:
        arch:
          - x86_64
          - arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Java
        id: install_java
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.INSTALLER_JAVA_VERSION }}
          distribution: temurin
          architecture: ${{ matrix.arch }}

      - name: Build natives
        run: resources/mac-cmake.sh ${{ steps.install_java.outputs.path }} ${{ matrix.arch }}

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.INSTALLER_JAVA_VERSION }}
          distribution: temurin
          cache: maven

      - name: Build Java
        run: mvn -B -DskipTests -Drevision=${{ needs.version.outputs.jitsi_version_full }} package

      - name: Cache Gradle dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Verify Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1.0.4

      - name: Generate dmg
        run: |
          cd $GITHUB_WORKSPACE/resources/install
          ./gradlew --no-daemon createDmg -Pversion=${{ needs.version.outputs.jitsi_version_full }} -PgitVersion=${{ needs.version.outputs.jitsi_version_git }}

      - name: Upload dmg
        uses: actions/upload-artifact@v3
        with:
          name: jitsi-mac-${{ matrix.arch }}
          path: resources/install/build/install/jitsi.dmg

  release:
    if: github.ref == 'refs/heads/new-build'
    needs:
      - version
      - deb
      - wix
      - mac
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download binaries
        uses: actions/download-artifact@v3
        with:
          path: target

      - name: Pack all debs to avoid Github filename mangling
        run: |
          tar -cvf debian-releases.tar target/{debian-*,ubuntu-*}/*

      - name: Create release
        uses: ncipollo/release-action@40bb172bd05f266cf9ba4ff965cb61e9ee5f6d01
        with:
          artifacts: "target/*.msi,target/*.dmg,debian-releases.tar"
          allowUpdates: true
          prerelease: true
          draft: true
          tag: r${{ needs.version.outputs.jitsi_version_short }}
          omitBody: true
          removeArtifacts: true
          replacesArtifacts: true
          token: ${{ secrets.GITHUB_TOKEN }}
          artifactErrorsFailBuild: true

  deploy:
    name: Deploy Debian packages
    needs:
      - version
      - release
    uses: ./.github/workflows/deploy-debian.yml
    with:
      release_type: unstable
      tag: r${{ needs.version.outputs.jitsi_version_short }}
    secrets: inherit
